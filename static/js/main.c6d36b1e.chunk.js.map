{"version":3,"sources":["redux/game/gameSelectors.js","redux/game/gameSlice.js","redux/stats/statsSelectors.js","redux/stats/statsSlice.js","redux/store.js","components/FinalForm.js","components/Modal.js","components/Header.js","components/Cube.js","components/Playground.js","components/ResultsList.js","App.js","index.js"],"names":["state","game","phase","cubes","points","createSlice","name","initialState","reducers","toggleStart","initCubes","payload","indexes","length","i","Math","floor","random","includes","push","resetGame","removeCube","filter","item","addPoint","stats","score","inputName","gameReducer","combineReducers","gameSlice","reducer","statsPersistConfig","key","storage","whitelist","statsReducer","statsSlice","statsPersistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","FinalForm","closeModal","useSelector","gameSelectors","dispatch","useDispatch","useState","setName","onSubmit","e","preventDefault","record","console","log","actions","className","htmlFor","id","value","onChange","target","type","Modal","children","refModal","useRef","handleClick","useCallback","current","closeModalKeydown","code","useEffect","window","addEventListener","document","body","style","overflow","removeEventListener","ModalOverlay","ref","onClick","styled","div","Header","start","isShowModal","setIsShowModal","closeForm","prev","secondsLeft","setSecondsLeft","token","setTimeout","clearTimeout","disabled","String","padStart","Cube","cell","stateCube","EMPTY","setState","backgroundColor","setBgColor","CLICKABLE","colors","data-index","cubeIndex","Number","dataset","index","count","Playground","rows","row","forEach","j","columns","map","cellIndex","uuidv4","renderRow","ResultsList","results","statsSelectors","scope","result","idx","App","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.c6d36b1e.chunk.js","sourcesContent":["const getGamePhase = state => state.game.phase;\r\nconst getCubes = state => state.game.cubes;\r\nconst getPoints = state => state.game.points;\r\n\r\nexport default { getGamePhase, getCubes, getPoints };\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst phase = createSlice({\r\n  name: 'game',\r\n  initialState: false,\r\n  reducers: {\r\n    toggleStart: state => !state,\r\n  },\r\n});\r\n\r\nconst randomizeIndexes = (state, { payload }) => {\r\n  const indexes = [];\r\n  while (indexes.length !== payload) {\r\n    const i = Math.floor(Math.random() * 100);\r\n    if (!indexes.includes(i) && !state.includes(i)) {\r\n      indexes.push(i);\r\n    }\r\n  }\r\n  return [...state, ...indexes];\r\n};\r\n\r\nconst onRemoveCube = (state, { payload }) =>\r\n  state.filter(item => item !== payload);\r\n\r\nconst cubes = createSlice({\r\n  name: 'game',\r\n  initialState: [],\r\n  reducers: {\r\n    initCubes: randomizeIndexes,\r\n    resetGame: () => [],\r\n    removeCube: onRemoveCube,\r\n  },\r\n});\r\n\r\nconst points = createSlice({\r\n  name: 'game',\r\n  initialState: 0,\r\n  reducers: {\r\n    addPoint: state => state + 1,\r\n    resetGame: () => 0,\r\n  },\r\n});\r\n\r\nexport default { phase, cubes, points };\r\n","const getResults = state => state.stats.score;\r\n\r\nexport default { getResults };\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst addRecord = (state, { payload }) => [...state, payload];\r\n\r\nconst score = createSlice({\r\n  name: 'stats',\r\n  initialState: [],\r\n  reducers: {\r\n    inputName: addRecord,\r\n  },\r\n});\r\n\r\nexport default { score };\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { gameSlice } from './game';\r\nimport { statsSlice } from './stats';\r\n\r\nconst gameReducer = combineReducers({\r\n  phase: gameSlice.phase.reducer,\r\n  cubes: gameSlice.cubes.reducer,\r\n  points: gameSlice.points.reducer,\r\n});\r\n\r\nconst statsPersistConfig = {\r\n  key: 'stats',\r\n  storage,\r\n  whitelist: ['score'],\r\n};\r\n\r\nconst statsReducer = combineReducers({\r\n  score: statsSlice.score.reducer,\r\n});\r\n\r\nconst statsPersistedReducer = persistReducer(statsPersistConfig, statsReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    game: gameReducer,\r\n    stats: statsPersistedReducer,\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gameSelectors, gameSlice } from '../redux/game';\r\nimport { statsSlice } from '../redux/stats';\r\n\r\nfunction FinalForm({ closeModal }) {\r\n  const score = useSelector(state => gameSelectors.getPoints(state));\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const record = { name, score };\r\n    console.log('record', record);\r\n    dispatch(statsSlice.score.actions.inputName(record));\r\n    closeModal();\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    setName(target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"p-5\">\r\n      <div className=\"mb-5\">\r\n        Your score: <span>{score}</span>\r\n      </div>\r\n      <div className=\"form-group d-flex\">\r\n        <label htmlFor=\"username\" className=\"mr-3 mb-5\">\r\n          Name\r\n        </label>\r\n        <input\r\n          id=\"username\"\r\n          name=\"username\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <button type=\"submit\" className=\"btn btn-primary mx-auto\">\r\n        Save\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default FinalForm;\r\n","import React, { useEffect, useRef, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Modal = ({ children, closeModal }) => {\r\n  const refModal = useRef();\r\n\r\n  const handleClick = useCallback(\r\n    ({ target }) => {\r\n      if (refModal.current !== target) return;\r\n      closeModal();\r\n    },\r\n    [closeModal],\r\n  );\r\n\r\n  const closeModalKeydown = useCallback(\r\n    e => {\r\n      if (e.code === 'Escape') {\r\n        closeModal();\r\n      }\r\n    },\r\n    [closeModal],\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', closeModalKeydown);\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    return function cleanup() {\r\n      window.removeEventListener('keydown', closeModalKeydown);\r\n      document.body.style.overflow = 'auto';\r\n    };\r\n  }, [closeModalKeydown]);\r\n\r\n  return (\r\n    <ModalOverlay ref={refModal} onClick={handleClick}>\r\n      <div className=\"modal-dialog modal-dialog-centered\">\r\n        <div className=\"modal-content\">{children}</div>\r\n      </div>\r\n    </ModalOverlay>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n\r\nconst ModalOverlay = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgb(128, 128, 128, 0.65);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 2;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gameSelectors, gameSlice } from '../redux/game';\r\nimport FinalForm from './FinalForm';\r\nimport Modal from './Modal';\r\n\r\nconst initCountCubes = 35;\r\n\r\nconst Header = () => {\r\n  const start = useSelector(state => gameSelectors.getGamePhase(state));\r\n  const points = useSelector(state => gameSelectors.getPoints(state));\r\n  const indexes = useSelector(state => gameSelectors.getCubes(state));\r\n  const dispatch = useDispatch();\r\n\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n  const closeForm = () => {\r\n    setIsShowModal(prev => !prev);\r\n  };\r\n  const onReset = () => {\r\n    setSecondsLeft(60);\r\n    if (start) {\r\n      dispatch(gameSlice.phase.actions.toggleStart());\r\n    }\r\n    dispatch(gameSlice.points.actions.resetGame());\r\n    dispatch(gameSlice.cubes.actions.resetGame());\r\n    dispatch(gameSlice.cubes.actions.initCubes(initCountCubes));\r\n  };\r\n  const onStart = () => {\r\n    if (!indexes.length) {\r\n      dispatch(gameSlice.cubes.actions.initCubes(initCountCubes));\r\n    }\r\n    dispatch(gameSlice.phase.actions.toggleStart());\r\n  };\r\n\r\n  const [secondsLeft, setSecondsLeft] = useState(60);\r\n  useEffect(() => {\r\n    let token;\r\n    if (start) {\r\n      token = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    if (secondsLeft === 0 && start) {\r\n      dispatch(gameSlice.phase.actions.toggleStart());\r\n      setIsShowModal(true);\r\n    }\r\n    return () => {\r\n      clearTimeout(token);\r\n    };\r\n  }, [start, secondsLeft]);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"jumbotron jumbotron-fluid py-3\">\r\n        <div className=\"row justify-content-between px-3 px-md-0 \">\r\n          <div className=\"col-12 col-md-8 pl-md-5\">\r\n            <h1 className=\"display-6\">Remove cubes</h1>\r\n            <div className=\"d-flex align-items-center justify-content-between text-center\">\r\n              <div>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mr-2 mr-md-3\"\r\n                  onClick={onStart}\r\n                  disabled={!secondsLeft}\r\n                >\r\n                  {start ? 'PAUSE' : 'START'}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={onReset}\r\n                >\r\n                  NEW GAME\r\n                </button>\r\n              </div>\r\n              <div className=\"d-inline-flex flex-column\">\r\n                Points\r\n                <span className=\"border border-secondary rounded-lg bg-white p-2\">\r\n                  {points}\r\n                </span>\r\n              </div>\r\n              <div className=\"d-inline-flex flex-column\">\r\n                Time left\r\n                <span className=\"border border-secondary rounded-lg bg-white p-2\">\r\n                  {secondsLeft === 60 ? 1 : 0} :{' '}\r\n                  {secondsLeft === 60\r\n                    ? '00'\r\n                    : String(secondsLeft).padStart(2, '0')}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"d-none d-md-block col-md-3 pr-3 pt-3 pt-lg-4\">\r\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit\r\n          </div>\r\n        </div>\r\n      </header>\r\n      {isShowModal && (\r\n        <Modal closeModal={closeForm}>\r\n          <FinalForm closeModal={closeForm} />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gameSelectors, gameReducer, gameSlice } from '../redux/game';\r\n\r\nconst Cube = ({ cell }) => {\r\n  const dispatch = useDispatch();\r\n  const start = useSelector(state => gameSelectors.getGamePhase(state));\r\n  const indexes = useSelector(state => gameSelectors.getCubes(state));\r\n  const [state, setState] = useState(stateCube.EMPTY);\r\n  const [backgroundColor, setBgColor] = useState('transparent');\r\n\r\n  useEffect(() => {\r\n    if (state === stateCube.CLICKABLE) {\r\n      setBgColor(colors[Math.floor(Math.random() * 15)]);\r\n    } else {\r\n      setBgColor('transparent');\r\n    }\r\n  }, [state]);\r\n\r\n  useEffect(() => {\r\n    if (start && indexes.includes(cell)) {\r\n      setState(stateCube.CLICKABLE);\r\n    } else {\r\n      setState(stateCube.EMPTY);\r\n    }\r\n  }, [start, indexes]);\r\n\r\n  const handleClick = e => {\r\n    const cubeIndex = Number(e.target.dataset.index);\r\n    if (!indexes.includes(cubeIndex)) {\r\n      return;\r\n    }\r\n    dispatch(gameSlice.cubes.actions.removeCube(cubeIndex));\r\n    dispatch(gameSlice.points.actions.addPoint());\r\n    const count = Math.floor(Math.random() * 3);\r\n    dispatch(gameSlice.cubes.actions.initCubes(count));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"cube\"\r\n      style={{ backgroundColor }}\r\n      data-index={cell}\r\n      onClick={handleClick}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Cube;\r\n\r\nconst stateCube = {\r\n  EMPTY: 0,\r\n  CLICKABLE: 1,\r\n};\r\n\r\nconst colors = [\r\n  '#FFCC00',\r\n  '#663300',\r\n  '#CC3300',\r\n  '#FF0000',\r\n  '#CC6666',\r\n  '#990033',\r\n  '#9933CC',\r\n  '#660099',\r\n  '#0000FF',\r\n  '#006666',\r\n  '#33CCFF',\r\n  '#FF9900',\r\n  '#00FFFF',\r\n  '#00CC00',\r\n  '#99FF00',\r\n];\r\n\r\nfunction getRandomColor() {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n","import React from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Cube from './Cube';\r\n\r\nconst Playground = () => {\r\n  const renderRow = (row, i) => {\r\n    const columns = row.map((cellIndex, j) => {\r\n      return <Cube key={uuidv4()} cell={cellIndex} />;\r\n    });\r\n\r\n    return (\r\n      <div key={i} className=\"area-row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const rows = [];\r\n  const row = [];\r\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(i => {\r\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(j => {\r\n      row[j] = i * 10 + j;\r\n    });\r\n    rows.push(renderRow(row, i));\r\n  });\r\n  return <div className=\"area\">{rows}</div>;\r\n};\r\n\r\nexport default Playground;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { statsSelectors } from '../redux/stats';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction ResultsList() {\r\n  const results = useSelector(state => statsSelectors.getResults(state));\r\n  return (\r\n    <table className=\"table table-striped\">\r\n      <thead>\r\n        <tr key=\"header\">\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Name</th>\r\n          <th scope=\"col\">Score</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {results.length > 0 &&\r\n          results.map((result, idx) => (\r\n            <tr key={uuidv4()}>\r\n              <th scope=\"row\">{idx + 1}</th>\r\n              <td>{result.name}</td>\r\n              <td>{result.score}</td>\r\n            </tr>\r\n          ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default ResultsList;\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Playground from './components/Playground';\nimport ResultsList from './components/ResultsList';\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-12 col-lg-9 mb-5 mb-lg-0\">\n            <Playground />\n          </div>\n          <div className=\"col-12 col-lg-3\">\n            <ResultsList />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}